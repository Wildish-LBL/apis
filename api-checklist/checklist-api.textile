API for checklist evaluation.

{toc}

Contents:
* API function overview
* API usage
* Link relations
* Resources and formats
* Cache considerations
* Security considerations
* References


h1. API function overview

The checklist evaluation API is intended to provide access to the minim-based evaluation of Research Objects, used to test for completeness, executability, repeatability and other desired features.  The functionality provided is based on the @ro-manager@ @evaluate checklist@ option:

<pre><code>  ro evaluate checklist [ -d <dir> ] [ -a | -l <level> ] <minim> <purpose> [ <target> ]
</code></pre>

where:

* @<dir>@ is the directory containing the RO to be evaluated
* @<level>@ indicates the level of information detail to be returned
* @<minim>@ is a URI reference for a minimum information model resource from which the checklist definition is obtained
* @<target>@ is a target resource with respect to which the evaluation is performed; the default @<target>@ is the RO itself, but a component within the RO may be selected.
* @<purpose>@ is a keyword indicating the purpose for which the RO or @<target>@ is to be evaluated.

For example:
<pre><code>  ro evaluate checklist -d /workspace/myro -l all /workspace/minim.rdf "creation" myro/wfoutput.dat
</code></pre>
might evaluate the RO at @/workspace/myro@ using the minim model in file @/workspace/minim.rdf@.

The Web API is intended to provide remote access to the above functionality using simple HTTP requests.

Research Objects and other data are provided as web resources, and indicated in the API using their URIs.


h1. API usage

Suppose we have:
* A checklist evaluation service accessible at @<http://service.example.org/evaluate/checklist>@
* An RO with URI @<http://sandbox.example.org/ROs/myro>@
* A MINIM minimum information model description (containing checklist definitions including one for repeatability) at @<http://another.example.com/minim/repeatable.rdf>@
* The checklist definition in the MINIM model for repeatability is associated with the purpose keyword "repeatable".

Note: there is an example of a simple minim model at [https://github.com/wf4ever/ro-catalogue/blob/master/v0.1/simple-requirements/simple-requirements-minim.rdf]

The checklist evaluation would then be invoked in a sequence of two HTTP operations:

# Client retrieves service document:
<pre>
<code>
  C: GET /evaluate/checklist HTTP/1.1
  C: Host: service.example.org
  C: Accept: application/rdf+xml

  S: HTTP/1.1 200 OK
  S: Content-Type: application/rdf+xml
  S:
  S: <?xml version="1.0"?>
  S: <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  S:   xmlns:roe="http://purl.org/ro/service/evaluate/">
  S:   <rdf:Description rdf:about="">
  S:     <roe:checklist>/evaluate/checklist{?RO,minim,target,purpose}</roe:checklist>
  S:   </rdf:Description>
  S: </rdf:RDF>
</code>
</pre>
# Client parses the service document, extracts the URI template for the checklist evaluation service and assembles URI for the desired evaluation result (cf. RFC6570), and issues a second HTTP GET request:
<pre>
<code>
  C: GET /evaluate/checklist?RO=http%3A%2F%2Fsandbox.example.org%2FROs%2Fmyro
           &minim=http%3A%2F%2Fanother.example.com%2Fminim%2Frepeatable.rdf
           &purpose=repeatable HTTP/1.1
  C: Host: service.example.org
  C: Accept: application/rdf+xml

  S: HTTP/1.1 200 OK
  S: Content-Type: application/rdf+xml
  S:
  S: <?xml version="1.0"?>
  S: <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  S:   xmlns:...="..."
  S:   >
  S:   <rdf:Description rdf:about="...">
  S:     (Result of checklist evaluation)
  S:   </rdf:Description>
  S: </rdf:RDF>
</code>
</pre>

The result from the second request is the checklist evaluation result.  The URI shown above has been split over several lines for readability - the actual HTTP request must present it without whitespace. The optional target URI parameter has been omitted in this example on the assumption that the target is the Research Object itself.

See also:
* http://tools.ietf.org/html/rfc2616
* http://tools.ietf.org/html/rfc3986
* http://tools.ietf.org/html/rfc6570
* https://github.com/wf4ever/ro-manager/blob/master/src/iaeval/Minim/minim.rdf


h1. Link relations

h2. [http://purl.org/ro/service/evaluate/checklist]

This relation is generally used used in the service description document

It indicates a relation between a service description and a URI template for RO evaluation results using the described service.  The URI template is is used to construct a service result URI by:
# applying the URI template expansion procedures with caller-supplied RO URI, minim URI, purpose and target URIs, and
# resolving the resulting URI-reference to an absolute URI using normal URI resolution rules (e.g. typically, using the service document URI as a base URI)

See also:
* http://tools.ietf.org/html/rfc6570
* http://tools.ietf.org/html/rfc3986


h1. HTTP methods

The service description is obtained in response to an HTTP GET to a checklist evaluation service URI.

The checklist evaluation service responds to an HTTP GET with the results of a checklist evaluation, using the URI defined by expanding the template provided by the service description.


h1. Resources and formats

h2. Service description

The checklist evaluation service description is an RDF file that contains URI templates for accessing RO related services, including checklist evaluation.  The RDF syntax used may be content negotiated.  In the absence of content negotiation, RDF/XML should be returned.

Example:
<pre><code><?xml version="1.0"?>
  <rdf:RDF
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:roe="http://purl.org/ro/service/evaluate/"
    >
    <rdf:Description rdf:about="">
      <roe:checklist>/evaluate/checklist{?RO,minim,target,purpose}</roe:checklist>
    </rdf:Description>
  </rdf:RDF>
</code></pre>

h2. Research Object

See:
* http://www.wf4ever-project.org/wiki/display/docs/RO+model
* http://www.wf4ever-project.org/wiki/display/docs/Research+Object+Vocabulary+Specification
* http://www.wf4ever-project.org/wiki/display/docs/Research+Object+model

h2. Minim description

@@TBD

h2. Checklist evaluation results

@@TBD


h1. Cache considerations

Effective (and correct) cacheing of checklist evaluation results is desirable, as this could prevent unnecessary recalculation of results that have already been calculated.  But care is needed to avoid incorrect cacheing which could result in incorrect results being returned.

The result of a checklist evaluation should be cacheable, subject to cacheability of the evaluation service document, the minim description and the RO that is evaluated. The service should return cache-control headers on the evaluation result that require re-evaluation when the criteria for cacheing the various resources used are no longer satisfied (e.g. @Cache-Control: max-age@ values returned should no greater than the minimum of the values associated with all resources used).

Also note any @Vary:@ headers or other @Cache-control:@ values that are returned: if the corresponding headers are derived from client-supplied header field values, the checklist evaluation response should indicate this.

@@Any other potential gotchas here?

See also:
* http://www.mnot.net/cache_docs/


h1. Security considerations

Checklist evaluation is a read-only function, so there is no obvious risk of unindented data modification.

Checklist evaluation results may expose information about the content of a Research Object.  As a general rule, the results of a checklist evaluation should be provided only to agents who themselves have permission to access the RO contents.  Mechanisms for implementing such access control are not described here.

See also: [@@ref Wf4Ever access control mechanisms]


h1. References

* http://tools.ietf.org/html/rfc2616
* http://tools.ietf.org/html/rfc3986
* http://tools.ietf.org/html/rfc6570
* http://www.wf4ever-project.org/wiki/display/docs/RO+model
* http://www.wf4ever-project.org/wiki/display/docs/Research+Object+Vocabulary+Specification
* http://www.wf4ever-project.org/wiki/display/docs/Research+Object+model
* https://github.com/wf4ever/ro-manager/blob/master/src/iaeval/Minim/minim.rdf (currently requires Wf4Ever github log-in)
* http://www.mnot.net/cache_docs/


<pre>
<code>
</code>
</pre>

